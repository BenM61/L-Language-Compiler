
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import AST.*;
import java.io.*;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokenNames.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\005\004\000\002\005" +
    "\003\000\002\017\004\000\002\017\003\000\002\023\004" +
    "\000\002\023\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\011\000\002\012\005\000\002\012\007" +
    "\000\002\012\007\000\002\013\011\000\002\013\012\000" +
    "\002\021\004\000\002\021\005\000\002\022\006\000\002" +
    "\022\005\000\002\014\007\000\002\014\011\000\002\002" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\010" +
    "\000\002\002\007\000\002\002\006\000\002\002\005\000" +
    "\002\002\003\000\002\002\004\000\002\002\003\000\002" +
    "\002\003\000\002\025\005\000\002\025\004\000\002\026" +
    "\004\000\002\026\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\006\000\002\004\006\000\002\004\003\000" +
    "\002\004\006\000\002\004\005\000\002\004\004\000\002" +
    "\004\011\000\002\004\011\000\002\004\011\000\002\004" +
    "\010\000\002\004\007\000\002\004\006\000\002\016\004" +
    "\000\002\016\007\000\002\015\003\000\002\015\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\016\027\005\030\010\035\015\036\021\041" +
    "\020\043\013\001\002\000\004\002\224\001\002\000\010" +
    "\016\ufff5\022\ufff5\043\ufff5\001\002\000\020\002\ufff8\027" +
    "\ufff8\030\ufff8\035\ufff8\036\ufff8\041\ufff8\043\ufff8\001\002" +
    "\000\020\002\ufffd\027\005\030\010\035\015\036\021\041" +
    "\020\043\013\001\002\000\004\043\215\001\002\000\020" +
    "\002\ufff9\027\ufff9\030\ufff9\035\ufff9\036\ufff9\041\ufff9\043" +
    "\ufff9\001\002\000\004\002\ufffa\001\002\000\010\016\ufff2" +
    "\022\ufff2\043\ufff2\001\002\000\004\043\037\001\002\000" +
    "\010\016\ufff4\022\ufff4\043\ufff4\001\002\000\020\002\ufff6" +
    "\027\ufff6\030\ufff6\035\ufff6\036\ufff6\041\ufff6\043\ufff6\001" +
    "\002\000\020\002\ufff7\027\ufff7\030\ufff7\035\ufff7\036\ufff7" +
    "\041\ufff7\043\ufff7\001\002\000\010\016\ufff3\022\ufff3\043" +
    "\ufff3\001\002\000\004\043\022\001\002\000\006\020\023" +
    "\031\024\001\002\000\012\027\005\035\015\041\020\043" +
    "\013\001\002\000\004\043\025\001\002\000\004\020\026" +
    "\001\002\000\012\027\005\035\015\041\020\043\013\001" +
    "\002\000\014\021\uffc5\027\uffc5\035\uffc5\041\uffc5\043\uffc5" +
    "\001\002\000\004\021\034\001\002\000\014\021\uffc6\027" +
    "\uffc6\035\uffc6\041\uffc6\043\uffc6\001\002\000\014\021\ufffb" +
    "\027\005\035\015\041\020\043\013\001\002\000\004\021" +
    "\ufffc\001\002\000\020\002\uffe6\027\uffe6\030\uffe6\035\uffe6" +
    "\036\uffe6\041\uffe6\043\uffe6\001\002\000\004\021\036\001" +
    "\002\000\020\002\uffe7\027\uffe7\030\uffe7\035\uffe7\036\uffe7" +
    "\041\uffe7\043\uffe7\001\002\000\010\014\041\022\040\023" +
    "\042\001\002\000\030\002\ufff0\004\ufff0\012\ufff0\021\ufff0" +
    "\027\ufff0\030\ufff0\032\ufff0\035\ufff0\036\ufff0\041\ufff0\043" +
    "\ufff0\001\002\000\014\015\122\027\005\035\015\041\020" +
    "\043\013\001\002\000\020\010\043\014\053\033\045\034" +
    "\046\037\051\042\044\043\052\001\002\000\004\042\120" +
    "\001\002\000\030\005\uffde\007\uffde\010\uffde\011\uffde\013" +
    "\uffde\015\uffde\017\uffde\022\uffde\024\uffde\025\uffde\026\uffde" +
    "\001\002\000\012\027\005\035\015\041\020\043\013\001" +
    "\002\000\030\005\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc" +
    "\015\uffdc\017\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\001" +
    "\002\000\004\022\113\001\002\000\022\005\071\007\070" +
    "\010\065\011\074\013\066\022\112\024\072\025\075\001" +
    "\002\000\030\005\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb" +
    "\015\uffdb\017\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\001" +
    "\002\000\036\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\014\106\015\uffd6\016\uffd6\017\uffd6\022\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\001\002\000\016\010\043\014\053" +
    "\034\046\037\051\042\044\043\052\001\002\000\034\005" +
    "\uffe5\006\056\007\uffe5\010\uffe5\011\uffe5\013\uffe5\015\uffe5" +
    "\016\055\017\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\001" +
    "\002\000\016\010\043\014\053\034\046\037\051\042\044" +
    "\043\052\001\002\000\004\043\057\001\002\000\036\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\060" +
    "\015\uffd5\016\uffd5\017\uffd5\022\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\001\002\000\020\010\043\014\053\015\062\034\046" +
    "\037\051\042\044\043\052\001\002\000\024\005\071\007" +
    "\070\010\065\011\074\013\066\015\uffd7\024\072\025\075" +
    "\026\073\001\002\000\030\005\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\013\uffe1\015\uffe1\017\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\001\002\000\004\015\064\001\002\000\030\005" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2" +
    "\022\uffe2\024\uffe2\025\uffe2\026\uffe2\001\002\000\016\010" +
    "\uffc3\014\uffc3\034\uffc3\037\uffc3\042\uffc3\043\uffc3\001\002" +
    "\000\016\010\uffc1\014\uffc1\034\uffc1\037\uffc1\042\uffc1\043" +
    "\uffc1\001\002\000\016\010\043\014\053\034\046\037\051" +
    "\042\044\043\052\001\002\000\016\010\uffc4\014\uffc4\034" +
    "\uffc4\037\uffc4\042\uffc4\043\uffc4\001\002\000\016\010\uffbe" +
    "\014\uffbe\034\uffbe\037\uffbe\042\uffbe\043\uffbe\001\002\000" +
    "\016\010\uffc0\014\uffc0\034\uffc0\037\uffc0\042\uffc0\043\uffc0" +
    "\001\002\000\016\010\043\014\053\034\046\037\051\042" +
    "\044\043\052\001\002\000\016\010\uffc2\014\uffc2\034\uffc2" +
    "\037\uffc2\042\uffc2\043\uffc2\001\002\000\016\010\uffbf\014" +
    "\uffbf\034\uffbf\037\uffbf\042\uffbf\043\uffbf\001\002\000\004" +
    "\015\uffd8\001\002\000\024\005\071\007\070\010\065\011" +
    "\074\013\066\015\uffd9\024\072\025\075\026\073\001\002" +
    "\000\004\015\uffda\001\002\000\030\005\071\007\070\010" +
    "\065\011\074\013\066\015\uffe3\017\uffe3\022\uffe3\024\072" +
    "\025\075\026\uffe3\001\002\000\022\005\071\007\070\010" +
    "\065\011\074\013\066\017\103\024\072\025\075\001\002" +
    "\000\036\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\001\002\000\022\005\071\007\070\010" +
    "\065\011\074\013\066\015\105\024\072\025\075\001\002" +
    "\000\030\005\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\015" +
    "\uffe4\017\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\001\002" +
    "\000\020\010\043\014\053\015\107\034\046\037\051\042" +
    "\044\043\052\001\002\000\030\005\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\015\uffdf\017\uffdf\022\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\001\002\000\004\015\111\001\002\000\030" +
    "\005\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\015\uffe0\017" +
    "\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\001\002\000\030" +
    "\002\uffef\004\uffef\012\uffef\021\uffef\027\uffef\030\uffef\032" +
    "\uffef\035\uffef\036\uffef\041\uffef\043\uffef\001\002\000\030" +
    "\002\uffee\004\uffee\012\uffee\021\uffee\027\uffee\030\uffee\032" +
    "\uffee\035\uffee\036\uffee\041\uffee\043\uffee\001\002\000\006" +
    "\016\115\022\uffc8\001\002\000\016\010\043\014\053\034" +
    "\046\037\051\042\044\043\052\001\002\000\022\005\071" +
    "\007\070\010\065\011\074\013\066\017\117\024\072\025" +
    "\075\001\002\000\004\022\uffc7\001\002\000\030\005\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\013\uffdd\015\uffdd\017\uffdd\022" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\001\002\000\004\015\211" +
    "\001\002\000\004\020\132\001\002\000\004\043\124\001" +
    "\002\000\006\015\uffeb\026\126\001\002\000\004\015\uffea" +
    "\001\002\000\012\027\005\035\015\041\020\043\013\001" +
    "\002\000\004\043\130\001\002\000\006\015\uffe8\026\126" +
    "\001\002\000\004\015\uffe9\001\002\000\020\004\137\012" +
    "\133\027\005\032\142\035\015\041\020\043\140\001\002" +
    "\000\004\014\203\001\002\000\022\004\137\012\133\021" +
    "\uffff\027\005\032\142\035\015\041\020\043\140\001\002" +
    "\000\022\004\uffd2\012\uffd2\021\uffd2\027\uffd2\032\uffd2\035" +
    "\uffd2\041\uffd2\043\uffd2\001\002\000\004\021\201\001\002" +
    "\000\004\014\173\001\002\000\014\006\uffd6\014\165\016" +
    "\uffd6\023\uffd6\043\ufff2\001\002\000\004\043\164\001\002" +
    "\000\020\010\043\014\053\022\162\034\046\037\051\042" +
    "\044\043\052\001\002\000\010\006\144\016\055\023\145" +
    "\001\002\000\004\043\152\001\002\000\020\010\043\014" +
    "\053\033\045\034\046\037\051\042\044\043\052\001\002" +
    "\000\004\022\151\001\002\000\022\005\071\007\070\010" +
    "\065\011\074\013\066\022\150\024\072\025\075\001\002" +
    "\000\022\004\uffd3\012\uffd3\021\uffd3\027\uffd3\032\uffd3\035" +
    "\uffd3\041\uffd3\043\uffd3\001\002\000\022\004\uffd1\012\uffd1" +
    "\021\uffd1\027\uffd1\032\uffd1\035\uffd1\041\uffd1\043\uffd1\001" +
    "\002\000\012\006\uffd5\014\153\016\uffd5\023\uffd5\001\002" +
    "\000\020\010\043\014\053\015\154\034\046\037\051\042" +
    "\044\043\052\001\002\000\004\022\160\001\002\000\004" +
    "\015\156\001\002\000\004\022\157\001\002\000\022\004" +
    "\uffcc\012\uffcc\021\uffcc\027\uffcc\032\uffcc\035\uffcc\041\uffcc" +
    "\043\uffcc\001\002\000\022\004\uffcb\012\uffcb\021\uffcb\027" +
    "\uffcb\032\uffcb\035\uffcb\041\uffcb\043\uffcb\001\002\000\022" +
    "\005\071\007\070\010\065\011\074\013\066\022\163\024" +
    "\072\025\075\001\002\000\022\004\uffcf\012\uffcf\021\uffcf" +
    "\027\uffcf\032\uffcf\035\uffcf\041\uffcf\043\uffcf\001\002\000" +
    "\022\004\uffd0\012\uffd0\021\uffd0\027\uffd0\032\uffd0\035\uffd0" +
    "\041\uffd0\043\uffd0\001\002\000\006\022\040\023\042\001" +
    "\002\000\020\010\043\014\053\015\166\034\046\037\051" +
    "\042\044\043\052\001\002\000\004\022\172\001\002\000" +
    "\004\015\170\001\002\000\004\022\171\001\002\000\022" +
    "\004\uffca\012\uffca\021\uffca\027\uffca\032\uffca\035\uffca\041" +
    "\uffca\043\uffca\001\002\000\022\004\uffc9\012\uffc9\021\uffc9" +
    "\027\uffc9\032\uffc9\035\uffc9\041\uffc9\043\uffc9\001\002\000" +
    "\016\010\043\014\053\034\046\037\051\042\044\043\052" +
    "\001\002\000\022\005\071\007\070\010\065\011\074\013" +
    "\066\015\175\024\072\025\075\001\002\000\004\020\176" +
    "\001\002\000\020\004\137\012\133\027\005\032\142\035" +
    "\015\041\020\043\140\001\002\000\004\021\200\001\002" +
    "\000\022\004\uffce\012\uffce\021\uffce\027\uffce\032\uffce\035" +
    "\uffce\041\uffce\043\uffce\001\002\000\022\002\uffed\021\uffed" +
    "\027\uffed\030\uffed\035\uffed\036\uffed\041\uffed\043\uffed\001" +
    "\002\000\004\021\000\001\002\000\016\010\043\014\053" +
    "\034\046\037\051\042\044\043\052\001\002\000\022\005" +
    "\071\007\070\010\065\011\074\013\066\015\205\024\072" +
    "\025\075\001\002\000\004\020\206\001\002\000\020\004" +
    "\137\012\133\027\005\032\142\035\015\041\020\043\140" +
    "\001\002\000\004\021\210\001\002\000\022\004\uffcd\012" +
    "\uffcd\021\uffcd\027\uffcd\032\uffcd\035\uffcd\041\uffcd\043\uffcd" +
    "\001\002\000\004\020\212\001\002\000\020\004\137\012" +
    "\133\027\005\032\142\035\015\041\020\043\140\001\002" +
    "\000\004\021\214\001\002\000\022\002\uffec\021\uffec\027" +
    "\uffec\030\uffec\035\uffec\036\uffec\041\uffec\043\uffec\001\002" +
    "\000\004\005\216\001\002\000\012\027\005\035\015\041" +
    "\020\043\013\001\002\000\004\016\220\001\002\000\004" +
    "\017\221\001\002\000\004\022\222\001\002\000\020\002" +
    "\ufff1\027\ufff1\030\ufff1\035\ufff1\036\ufff1\041\ufff1\043\ufff1" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\022\006\003\007\006\010\013\011\015\012" +
    "\010\013\005\014\016\017\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\006\010" +
    "\013\011\015\012\010\013\005\014\016\017\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\013\012\030\013\026" +
    "\015\031\023\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\013\012\030\013\026\015\031\023\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\013\012\030\013\026\015\031\023\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\122\021\120\001\001\000\010\002\047\003" +
    "\053\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\103\003\053\001\001\000\002\001" +
    "\001\000\006\002\101\003\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\060\003\053\026\062\001" +
    "\001\000\006\024\066\025\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\100\003\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\076\003\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\066\025\077\001\001\000" +
    "\002\001\001\000\004\024\066\001\001\000\004\024\066" +
    "\001\001\000\002\001\001\000\004\024\066\001\001\000" +
    "\002\001\001\000\010\002\060\003\053\026\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\115\003\053\001\001\000\004\024\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\124\001\001\000" +
    "\002\001\001\000\004\010\126\001\001\000\002\001\001" +
    "\000\004\022\130\001\001\000\002\001\001\000\014\003" +
    "\142\004\133\005\135\010\140\012\134\001\001\000\002" +
    "\001\001\000\014\003\142\004\133\005\201\010\140\012" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\160\003\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\146\003\053\016\145\001\001\000\002\001" +
    "\001\000\004\024\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\060\003\053\026" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\060\003\053\026\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\173\003\053\001" +
    "\001\000\004\024\066\001\001\000\002\001\001\000\014" +
    "\003\142\004\133\005\176\010\140\012\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\203\003\053\001\001\000\004\024" +
    "\066\001\001\000\002\001\001\000\014\003\142\004\133" +
    "\005\206\010\140\012\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\142\004\133" +
    "\005\212\010\140\012\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 

    }


	public Lexer lexer;
	public String file;

	public Parser(Lexer lexer, String file)
	{
		super(lexer);
		this.lexer = lexer;
		this.file = file;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		String line = String.valueOf(lexer.getLine());
		System.out.print(lexer.getLine());
		System.out.print(":");
		String pos = String.valueOf(lexer.getCharPos());
		System.out.print(lexer.getCharPos());
		System.out.print("] ");	
		PrintWriter file_writer;
        try
        {
			String a = String.valueOf(info);
            if (a.equals("#30"))
			{
				file_writer = new PrintWriter(file);
				file_writer.print("ERROR");
            	file_writer.close();
			}
			else
			{
				file_writer = new PrintWriter(file);
				file_writer.print("ERROR");
				file_writer.print("(");
				file_writer.print(line);
				//file_writer.print(pos);
				file_writer.print(")");
            	file_writer.close();
			}
        }   
        catch(Exception e){}
	
		System.exit(0);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_PROGRAM start_val = (AST_PROGRAM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // stmtList ::= stmt stmtList 
            {
              AST_STMT_LIST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT s = (AST_STMT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_STMT_LIST l = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_LIST(s,l);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmt 
            {
              AST_STMT_LIST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_STMT s = (AST_STMT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_LIST(s,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decList ::= dec decList 
            {
              AST_DEC_LIST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_DEC d = (AST_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_DEC_LIST l = (AST_DEC_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DEC_LIST(d,l);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decList ::= dec 
            {
              AST_DEC_LIST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_DEC d = (AST_DEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DEC_LIST(d,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cFieldList ::= cField cFieldList 
            {
              AST_CFEILD_LIST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFIELD c = (AST_CFIELD)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CFEILD_LIST l = (AST_CFEILD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFEILD_LIST(c,l);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cFieldList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cFieldList ::= cField 
            {
              AST_CFEILD_LIST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CFIELD c = (AST_CFIELD)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFEILD_LIST(c,null);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cFieldList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Program ::= decList 
            {
              AST_PROGRAM RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_DEC_LIST p = (AST_DEC_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST_PROGRAM(p) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec ::= varDec 
            {
              AST_DEC RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VARDEC v = (AST_VARDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST_DEC_VARDEC(v);			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec ::= funcDec 
            {
              AST_DEC RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNCDEC f = (AST_FUNCDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=  new AST_DEC_FUNCDEC(f);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec ::= classDec 
            {
              AST_DEC RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CLASSDEC c = (AST_CLASSDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new AST_DEC_CLASSDEC(c)  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec ::= arrayTypedef 
            {
              AST_DEC RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_ATD a = (AST_ATD)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new AST_DEC_ATD(a)  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= TYPE_INT 
            {
              AST_TYPE RESULT =null;
		 RESULT= new AST_TYPE_INT()  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= TYPE_STRING 
            {
              AST_TYPE RESULT =null;
		 RESULT= new AST_TYPE_STRING() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= TYPE_VOID 
            {
              AST_TYPE RESULT =null;
		 RESULT= new AST_TYPE_VOID() ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= ID 
            {
              AST_TYPE RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST_TYPE_ID(id) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arrayTypedef ::= ARRAY ID EQ type LBRACK RBRACK SEMICOLON 
            {
              AST_ATD RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT= new AST_ATD(id, t) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayTypedef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varDec ::= type ID SEMICOLON 
            {
              AST_VARDEC RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new AST_VARDEC_SIMPLE(t,id) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDec ::= type ID ASSIGN exp SEMICOLON 
            {
              AST_VARDEC RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new AST_VARDEC_EXP(t,id,e)  ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varDec ::= type ID ASSIGN newExp SEMICOLON 
            {
              AST_VARDEC RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_NEWEXP e = (AST_NEWEXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new AST_VARDEC_NEWEXP(t,id,e) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcDec ::= type ID LPAREN RPAREN LBRACE stmtList RBRACE 
            {
              AST_FUNCDEC RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST s = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new AST_FUNCDEC_SIMPLE(t,id,s) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcDec ::= type ID LPAREN funcDecUtil1 RPAREN LBRACE stmtList RBRACE 
            {
              AST_FUNCDEC RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_FUNCDEC_UTIL1 f = (AST_FUNCDEC_UTIL1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST s = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new AST_FUNCDEC_WITH_UTIL(t,id,f,s) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcDecUtil1 ::= type ID 
            {
              AST_FUNCDEC_UTIL1 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST_FUNCDEC_UTIL1_SIMPLE(t,id) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecUtil1",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcDecUtil1 ::= type ID funcDecUtil2 
            {
              AST_FUNCDEC_UTIL1 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNCDEC_UTIL2 f = (AST_FUNCDEC_UTIL2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST_FUNCDEC_UTIL1_WITH_UTIL(t,id,f) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecUtil1",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcDecUtil2 ::= COMMA type ID funcDecUtil2 
            {
              AST_FUNCDEC_UTIL2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fu2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fu2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNCDEC_UTIL2 fu2 = (AST_FUNCDEC_UTIL2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST_FUNCDEC_UTIL2(t,id, fu2) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecUtil2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcDecUtil2 ::= COMMA type ID 
            {
              AST_FUNCDEC_UTIL2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new AST_FUNCDEC_UTIL2(t, id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDecUtil2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classDec ::= CLASS ID LBRACE cFieldList RBRACE 
            {
              AST_CLASSDEC RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFEILD_LIST cl = (AST_CFEILD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new AST_CLASSDEC_SIMPLE(id, cl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classDec ::= CLASS ID EXTENDS ID LBRACE cFieldList RBRACE 
            {
              AST_CLASSDEC RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFEILD_LIST cl = (AST_CFEILD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new AST_CLASSDEC_EXTENDS(id1, id2, cl);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= var 
            {
              AST_EXP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_VAR(v);          			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LPAREN exp RPAREN 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_EXP_SIMPLE(e1);        			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp BINOP exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_BINOP b = (AST_BINOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, e2, b); 			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= var DOT ID LPAREN expList RPAREN 
            {
              AST_EXP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXPLIST el = (AST_EXPLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_EXP_VARDOT_EXPLIST(v,name,el);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= var DOT ID LPAREN RPAREN 
            {
              AST_EXP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_EXP_VARDOT(v,name);   		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= ID LPAREN expList RPAREN 
            {
              AST_EXP RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXPLIST el = (AST_EXPLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_EXP_EXPLIST(name,el);  		   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= ID LPAREN RPAREN 
            {
              AST_EXP RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_EXP_ID(name);  				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= INT 
            {
              AST_EXP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_INT(i);   			   	       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= MINUS INT 
            {
              AST_EXP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_MINUS_INT(i);   			   	       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= NIL 
            {
              AST_EXP RESULT =null;
		 RESULT = new AST_EXP_NIL();   		   			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= STRING 
            {
              AST_EXP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_STRING(s);   				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // commaexpList ::= COMMA exp commaexpList 
            {
              AST_COMMAEXPLIST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_COMMAEXPLIST el = (AST_COMMAEXPLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_COMMAEXPLIST(e1,el);   		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaexpList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // commaexpList ::= COMMA exp 
            {
              AST_COMMAEXPLIST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_COMMAEXPLIST(e1,null);	        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaexpList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expList ::= exp commaexpList 
            {
              AST_EXPLIST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_COMMAEXPLIST el = (AST_COMMAEXPLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_LIST(e1,el);   	     	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expList ::= exp 
            {
              AST_EXPLIST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_LIST_SIMPLE(e1);   	     	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expList",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var ::= ID 
            {
              AST_VAR RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_VAR_SIMPLE(name);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var ::= var DOT ID 
            {
              AST_VAR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fieldNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fieldNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fieldName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_VAR_FIELD(v,fieldName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var ::= var LBRACK exp RBRACK 
            {
              AST_VAR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VAR_SUBSCRIPT(v,e);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= var ASSIGN exp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_ASSIGN(v,e);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= varDec 
            {
              AST_STMT RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VARDEC vd = (AST_VARDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_VARDEC(vd); 		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= var ASSIGN newExp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_NEWEXP ne = (AST_NEWEXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_NEWEXP(v,ne);  	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= RETURN exp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_EXP(e);  			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= RETURN SEMICOLON 
            {
              AST_STMT RESULT =null;
		 RESULT = new AST_STMT_RETURN(); 			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= IF LPAREN exp RPAREN LBRACE stmtList RBRACE 
            {
              AST_STMT RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_EXP cond = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST body = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_IF(   cond,body); 	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE 
            {
              AST_STMT RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_EXP cond = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST body = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_WHILE(cond,body); 	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= var DOT ID LPAREN expList RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXPLIST el = (AST_EXPLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_STMT_VARDOT_EXPLIST(v,name,el);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= var DOT ID LPAREN RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new AST_STMT_VARDOT(v,name);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= ID LPAREN expList RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXPLIST el = (AST_EXPLIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_STMT_EXPLIST(name,el);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= ID LPAREN RPAREN SEMICOLON 
            {
              AST_STMT RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new AST_STMT_ID(name);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // newExp ::= NEW type 
            {
              AST_NEWEXP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_NEWEXP_TYPE(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newExp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // newExp ::= NEW type LBRACK exp RBRACK 
            {
              AST_NEWEXP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_NEWEXP_EXP(t,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newExp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cField ::= varDec 
            {
              AST_CFIELD RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VARDEC vd = (AST_VARDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFEILD_VARDEC(vd);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cField",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cField ::= funcDec 
            {
              AST_CFIELD RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNCDEC fd = (AST_FUNCDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFEILD_FUNCDEC(fd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cField",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BINOP ::= PLUS 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP(0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BINOP ::= MINUS 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP(1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BINOP ::= TIMES 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP(2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BINOP ::= DIVIDE 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP(3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BINOP ::= GT 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP(4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BINOP ::= LT 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP(5); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BINOP ::= EQ 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP(6); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
