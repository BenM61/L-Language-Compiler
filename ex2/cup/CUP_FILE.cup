/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.*;
import java.io.PrintWriter;

parser code 
{:
	public Lexer lexer;
	public String file;

	public Parser(Lexer lexer, String file)
	{
		super(lexer);
		this.lexer = lexer;
		this.file = file;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		String line = String.valueOf(lexer.getLine());
		System.out.print(lexer.getLine());
		System.out.print(":");
		String pos = String.valueOf(lexer.getCharPos());
		System.out.print(lexer.getCharPos());
		System.out.print("] ");	
		PrintWriter file_writer;
        try
        {
			String a = String.valueOf(info);
            if (a.equals("#30"))
			{
				file_writer = new PrintWriter(file);
				file_writer.print("ERROR");
            	file_writer.close();
			}
			else
			{
				file_writer = new PrintWriter(file);
				file_writer.print("ERROR");
				file_writer.print("(");
				file_writer.print(line);
				//file_writer.print(pos);
				file_writer.print(")");
            	file_writer.close();
			}
        }   
        catch(Exception e){}
	
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};


/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal GT;
terminal LT;
terminal COMMA;
terminal TYPE_INT;
terminal ARRAY;
terminal EXTENDS;
terminal RETURN;
terminal NEW;
terminal NIL;
terminal TYPE_STRING;
terminal CLASS;
terminal STRING;
terminal ERROR;
terminal TYPE_VOID;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_ATD arrayTypedef;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;
non terminal AST_CFIELD cField;
non terminal AST_NEWEXP newExp;
non terminal AST_DEC_LIST decList;
non terminal AST_EXP_BINOP expBinop;
non terminal AST_FUNCDEC_UTIL1 funcDecUtil1;
non terminal AST_FUNCDEC_UTIL2 funcDecUtil2;
non terminal AST_CFEILD_LIST cFieldList;
non terminal AST_BINOP BINOP;
non terminal AST_COMMAEXPLIST commaexpList;
non terminal AST_EXPLIST expList;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left DOT;
precedence nonassoc LPAREN;
precedence nonassoc LBRACK;
precedence left COMMA, TIMES, DIVIDE;
precedence left PLUS, MINUS;
precedence left LT, GT;
precedence left EQ;
precedence nonassoc ASSIGN;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

decList	::=		dec:d	decList:l			{: RESULT = new AST_DEC_LIST(d,l);    :}
				| dec:d						{: RESULT = new AST_DEC_LIST(d,null); :}
				;

cFieldList	::=		cField:c cFieldList:l {: RESULT = new AST_CFEILD_LIST(c,l);    :}
						| cField:c  {: RESULT = new AST_CFEILD_LIST(c,null);    :}
						;

Program	::= decList:p					{: RESULT= new AST_PROGRAM(p) ;:};

dec ::= 	varDec:v 				{: RESULT= new AST_DEC_VARDEC(v);			:}
		| funcDec:f 			{: RESULT=  new AST_DEC_FUNCDEC(f);:}
		| classDec:c 			{: RESULT=new AST_DEC_CLASSDEC(c)  ;:}
		| arrayTypedef:a		{: RESULT=new AST_DEC_ATD(a)  ;:}
		;

type  ::= 	TYPE_INT 				{: RESULT= new AST_TYPE_INT()  ;:}
			| TYPE_STRING			{: RESULT= new AST_TYPE_STRING() ;:}
			| TYPE_VOID				{: RESULT= new AST_TYPE_VOID() ;:}
			| ID:id					{: RESULT= new AST_TYPE_ID(id) ;:}
			;

arrayTypedef ::= 	ARRAY ID:id EQ type:t LBRACK RBRACK SEMICOLON {: RESULT= new AST_ATD(id, t) ;:};

varDec	::= type:t ID:id SEMICOLON							{: RESULT= new AST_VARDEC_SIMPLE(t,id) ;:}
				| type:t ID:id ASSIGN exp:e SEMICOLON		{: RESULT= new AST_VARDEC_EXP(t,id,e)  ;:}
				| type:t ID:id ASSIGN newExp:e SEMICOLON	{: RESULT= new AST_VARDEC_NEWEXP(t,id,e) ;:}
				;

funcDec	::= 	type:t ID:id LPAREN RPAREN LBRACE stmtList:s RBRACE 					{: RESULT= new AST_FUNCDEC_SIMPLE(t,id,s) ;:}
				| type:t ID:id LPAREN funcDecUtil1:f RPAREN LBRACE stmtList:s RBRACE	{: RESULT= new AST_FUNCDEC_WITH_UTIL(t,id,f,s) ;:}
				;
funcDecUtil1 ::= type:t ID:id 							{: RESULT= new AST_FUNCDEC_UTIL1_SIMPLE(t,id) ;:}
						 | type:t ID:id funcDecUtil2:f  {: RESULT= new AST_FUNCDEC_UTIL1_WITH_UTIL(t,id,f) ;:}
						 ;
funcDecUtil2 ::= COMMA type:t ID:id funcDecUtil2:fu2  {: RESULT= new AST_FUNCDEC_UTIL2(t,id, fu2) ;:}
					   | COMMA type:t ID:id 		  {: RESULT= new AST_FUNCDEC_UTIL2(t, id, null); :}
						 ;
							
classDec 	::= 	CLASS ID:id LBRACE cFieldList:cl RBRACE 		  {: RESULT= new AST_CLASSDEC_SIMPLE(id, cl); :}
					| CLASS ID:id1 EXTENDS ID:id2 LBRACE cFieldList:cl RBRACE {: RESULT= new AST_CLASSDEC_EXTENDS(id1, id2, cl);  :}
					; 

exp			::=		var:v									 		 {: RESULT = new AST_EXP_VAR(v);          			   :}
					| LPAREN exp:e1 RPAREN							 {: RESULT = new AST_EXP_SIMPLE(e1);        			   :}
					| exp:e1 BINOP:b  exp:e2				 		 {: RESULT = new AST_EXP_BINOP(e1, e2, b); 			   :}
					| var:v DOT ID:name LPAREN expList:el RPAREN	 {: RESULT = new AST_EXP_VARDOT_EXPLIST(v,name,el);   :}
					| var:v DOT ID:name LPAREN RPAREN	 			 {: RESULT = new AST_EXP_VARDOT(v,name);   		   :}
					| ID:name LPAREN expList:el RPAREN	 		 	 {: RESULT = new AST_EXP_EXPLIST(name,el);  		   :}
					| ID:name LPAREN RPAREN	 		 				 {: RESULT = new AST_EXP_ID(name);  				   :}
					| INT:i 									 {: RESULT = new AST_EXP_INT(i);   			   	       :}
					| MINUS INT:i 									 {: RESULT = new AST_EXP_MINUS_INT(i);   			   	       :}
					| NIL 											 {: RESULT = new AST_EXP_NIL();   		   			   :}
					| STRING:s										 {: RESULT = new AST_EXP_STRING(s);   				   :}
					;	

commaexpList   ::= COMMA exp:e1 commaexpList:el  	{: RESULT = new AST_COMMAEXPLIST(e1,el);   		:}
					| COMMA exp:e1					{: RESULT = new AST_COMMAEXPLIST(e1,null);	        :}
					;
expList  ::=    exp:e1 commaexpList:el    		    {: RESULT = new AST_EXP_LIST(e1,el);   	     	:} 
				| exp:e1     		  			    {: RESULT = new AST_EXP_LIST_SIMPLE(e1);   	     	    :}
				;

							
var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON									{: RESULT = new AST_STMT_ASSIGN(v,e);		 :}
					|varDec:vd													 	{: RESULT = new AST_STMT_VARDEC(vd); 		 :}
					|var:v ASSIGN newExp:ne SEMICOLON						    	{: RESULT = new AST_STMT_NEWEXP(v,ne);  	 :}
					|RETURN exp:e SEMICOLON											{: RESULT = new AST_STMT_EXP(e);  			 :}
					|RETURN SEMICOLON												{: RESULT = new AST_STMT_RETURN(); 			 :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE		{: RESULT = new AST_STMT_IF(   cond,body); 	 :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE		{: RESULT = new AST_STMT_WHILE(cond,body); 	 :}
					|var:v DOT ID:name LPAREN expList:el RPAREN SEMICOLON			{: RESULT = new AST_STMT_VARDOT_EXPLIST(v,name,el);  :}
					|var:v DOT ID:name LPAREN RPAREN SEMICOLON						{: RESULT = new AST_STMT_VARDOT(v,name);     :}
					| ID:name LPAREN expList:el RPAREN SEMICOLON					{: RESULT = new AST_STMT_EXPLIST(name,el);   :}
					| ID:name LPAREN RPAREN SEMICOLON								{: RESULT = new AST_STMT_ID(name);           :}
					;
newExp 		::= 	NEW type:t 							 {: RESULT = new AST_NEWEXP_TYPE(t); :}
					| NEW type:t LBRACK exp:e RBRACK 	 {: RESULT = new AST_NEWEXP_EXP(t,e);:}
					;
cField 		::= 	varDec:vd 				{: RESULT = new AST_CFEILD_VARDEC(vd);  :}
					| funcDec:fd			{: RESULT = new AST_CFEILD_FUNCDEC(fd); :}
					;
BINOP 		::= 	PLUS 				{: RESULT = new AST_BINOP(0); :}	
					| MINUS 			{: RESULT = new AST_BINOP(1); :}
					| TIMES 			{: RESULT = new AST_BINOP(2); :}
					| DIVIDE 			{: RESULT = new AST_BINOP(3); :}
					| GT 				{: RESULT = new AST_BINOP(4); :}
					| LT 				{: RESULT = new AST_BINOP(5); :}
					| EQ 				{: RESULT = new AST_BINOP(6); :}
					;

