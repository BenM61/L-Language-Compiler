/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.*;
import java.io.PrintWriter;

parser code 
{:
	public Lexer lexer;
	public String file;

	public Parser(Lexer lexer, String file)
	{
		super(lexer);
		this.lexer = lexer;
		this.file = file;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		String line = String.valueOf(lexer.getLine());
		System.out.print(lexer.getLine());
		System.out.print(":");
		String pos = String.valueOf(lexer.getCharPos());
		System.out.print(lexer.getCharPos());
		System.out.print("] ");	
		PrintWriter file_writer;
        try
        {
			String a = String.valueOf(info);
            if (a.equals("#30"))
			{
				file_writer = new PrintWriter(file);
				file_writer.print("ERROR");
            	file_writer.close();
			}
			else
			{
				file_writer = new PrintWriter(file);
				file_writer.print("ERROR");
				file_writer.print("(");
				file_writer.print(line);
				//file_writer.print(pos);
				file_writer.print(")");
            	file_writer.close();
			}
        }   
        catch(Exception e){}
	
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};


/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal GT;
terminal LT;
terminal COMMA;
terminal TYPE_INT;
terminal ARRAY;
terminal EXTENDS;
terminal RETURN;
terminal NEW;
terminal NIL;
terminal TYPE_STRING;
terminal CLASS;
terminal STRING;
terminal ERROR;
terminal TYPE_VOID;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_ATD arrayTypedef;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;
non terminal AST_CFIELD cField;
non terminal AST_NEWEXP newExp;
non terminal AST_DEC_LIST decList;
non terminal AST_EXP_BINOP expBinop;
non terminal AST_CFEILD_LIST cFieldList;
non terminal AST_BINOP BINOP;
non terminal AST_EXPLIST expList;
non terminal AST_ARG_LIST argList;
non terminal AST_ARG arg;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/

precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left COMMA, TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

decList	::=		dec:d	decList:l			{: RESULT = new AST_DEC_LIST(d,l);    :}
				| dec:d						{: RESULT = new AST_DEC_LIST(d,null); :}
				;

cFieldList	::=		cField:c cFieldList:l {: RESULT = new AST_CFEILD_LIST(c,l);    :}
						| cField:c  {: RESULT = new AST_CFEILD_LIST(c,null);    :}
						;

cField 		::= 	varDec:vd 				{: RESULT = new AST_CFEILD_VARDEC(vd);  :}
					| funcDec:fd			{: RESULT = new AST_CFEILD_FUNCDEC(fd); :}
					;

Program	::= decList:p					{: RESULT= new AST_PROGRAM(p, parser.file) ;:};

dec ::= varDec:v 				{: RESULT= new AST_DEC_VARDEC(v);	:}
		| funcDec:f 			{: RESULT=  new AST_DEC_FUNCDEC(f); :}
		| classDec:c 			{: RESULT=new AST_DEC_CLASSDEC(c)  ;:}
		| arrayTypedef:a		{: RESULT=new AST_DEC_ATD(a)  ;     :}
		;

type  ::= 	TYPE_INT:t 				{: RESULT= new AST_TYPE_INT(tleft + 1)  ;:}
			| TYPE_STRING:s			{: RESULT= new AST_TYPE_STRING(sleft + 1) ;:}
			| TYPE_VOID:v				{: RESULT= new AST_TYPE_VOID(vleft + 1) ;:}
			| ID:id					{: RESULT= new AST_TYPE_ID(id, idleft + 1) ;:}
			;

arrayTypedef ::= 	ARRAY ID:id EQ type:t LBRACK RBRACK SEMICOLON {: RESULT= new AST_ATD(id, t, idleft + 1) ;:};

varDec	::= type:t ID:id SEMICOLON							{: RESULT= new AST_VARDEC_SIMPLE(t,id, tleft + 1) ;:}
				| type:t ID:id ASSIGN exp:e SEMICOLON		{: RESULT= new AST_VARDEC_EXP(t,id,e, tleft + 1)  ;:}
				| type:t ID:id ASSIGN newExp:e SEMICOLON	{: RESULT= new AST_VARDEC_NEWEXP(t,id,e,tleft + 1) ;:}
				;

funcDec	::= 	type:t ID:id LPAREN RPAREN LBRACE stmtList:s RBRACE 			{: RESULT= new AST_FUNCDEC(t,id, null,s, tleft + 1 );:}
				| type:t ID:id LPAREN argList:a RPAREN LBRACE stmtList:s RBRACE	{: RESULT= new AST_FUNCDEC(t,id,a,s, tleft + 1) ;:}
				;

arg ::=  type:t ID:id  					{: RESULT = new AST_ARG(t, id); :} ;

argList ::= arg:a										{: RESULT = new AST_ARG_LIST(a,null); :}
				| arg:a COMMA argList:l 		{: RESULT = new AST_ARG_LIST(a,l); :}
				;
							
classDec 	::= 	CLASS ID:id LBRACE cFieldList:cl RBRACE 		  {: RESULT= new AST_CLASSDEC_SIMPLE(id, cl,idleft +1); :}
					| CLASS ID:id1 EXTENDS ID:id2 LBRACE cFieldList:cl RBRACE {: RESULT= new AST_CLASSDEC_EXTENDS(id1, id2, cl,id1left +1);  :}
					; 

exp			::=		var:v									 		 {: RESULT = new AST_EXP_VAR(v);          			   :}
					| LPAREN exp:e1 RPAREN							 {: RESULT = new AST_EXP_SIMPLE(e1);        			   :}
					| BINOP:b				 						 {: RESULT = new AST_EXP_BINOP(b); 			   :}
					| var:v DOT ID:name LPAREN expList:el RPAREN	 {: RESULT = new AST_EXP_VARDOT_EXPLIST(v,name,el,vleft+1);   :}
					| var:v DOT ID:name LPAREN RPAREN	 			 {: RESULT = new AST_EXP_VARDOT(v,name,vleft+1);   		   :}
					| ID:name LPAREN expList:el RPAREN	 		 	 {: RESULT = new AST_EXP_EXPLIST(name,el,nameleft + 1);  		   :}
					| ID:name LPAREN RPAREN	 		 				 {: RESULT = new AST_EXP_ID(name,nameleft+1);  				   :}
					| INT:i 									     {: RESULT = new AST_EXP_INT(i);   			   	       :}
					| MINUS INT:i 									 {: RESULT = new AST_EXP_MINUS_INT(i);   			   	       :}
					| NIL 											 {: RESULT = new AST_EXP_NIL();   		   			   :}
					| STRING:s										 {: RESULT = new AST_EXP_STRING(s);   				   :}
					;	

expList  ::=     exp:e1 COMMA expList:e2		    {: RESULT = new AST_EXPLIST(e1,e2,e1left + 1);   	     	:} 
				| exp:e1     		  			    {: RESULT = new AST_EXPLIST(e1,null, e1left + 1);   	     	:}
				;

							
var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name, nameleft + 1);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName, vleft + 1); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e,vleft+1);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON									{: RESULT = new AST_STMT_ASSIGN(v,e,vleft + 1);		 :}
					|varDec:vd													 	{: RESULT = new AST_STMT_VARDEC(vd); 		 :}
					|var:v ASSIGN newExp:ne SEMICOLON						    	{: RESULT = new AST_STMT_NEWEXP(v,ne, vleft + 1);  	 :}
					|RETURN exp:e SEMICOLON											{: RESULT = new AST_STMT_EXP(e, eleft + 1);  			 :}
					|RETURN:r SEMICOLON												{: RESULT = new AST_STMT_RETURN(rleft + 1); 			 :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE		{: RESULT = new AST_STMT_IF(cond,body,condleft +1); 	 :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE		{: RESULT = new AST_STMT_WHILE(cond,body,condleft +1); 	 :}
					| var:v DOT ID:name LPAREN expList:el RPAREN SEMICOLON			{: RESULT = new AST_STMT_VARDOT_EXPLIST(v,name,el);  :}
					| var:v DOT ID:name LPAREN RPAREN SEMICOLON						{: RESULT = new AST_STMT_VARDOT(v,name);     :}
					| ID:name LPAREN expList:el RPAREN SEMICOLON					{: RESULT = new AST_STMT_EXPLIST(name,el, nameleft +1);   :}
					| ID:name LPAREN RPAREN SEMICOLON								{: RESULT = new AST_STMT_ID(name, nameleft+1);           :}
					;
newExp 		::= 	NEW type:t 							 {: RESULT = new AST_NEWEXP_TYPE(t,tleft+1); :}
					| NEW type:t LBRACK exp:e RBRACK 	 {: RESULT = new AST_NEWEXP_EXP(t,e, tleft + 1);:}
					;

BINOP 		::= 	exp:e1 PLUS  exp:e2 			{: RESULT = new AST_BINOP(0,e1,e2,e1left +1); :}	
					| exp:e1 MINUS  exp:e2			{: RESULT = new AST_BINOP(1,e1,e2,e1left +1); :}
					| exp:e1 TIMES  exp:e2 			{: RESULT = new AST_BINOP(2,e1,e2,e1left +1); :}
					| exp:e1 DIVIDE  exp:e2			{: RESULT = new AST_BINOP(3,e1,e2,e1left +1); :}
					| exp:e1 GT  exp:e2				{: RESULT = new AST_BINOP(4,e1,e2,e1left +1); :}
					| exp:e1 LT  exp:e2				{: RESULT = new AST_BINOP(5,e1,e2,e1left +1); :}
					| exp:e1 EQ  exp:e2				{: RESULT = new AST_BINOP(6,e1,e2,e1left +1); :}
					;